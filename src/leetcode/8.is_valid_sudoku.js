
/**
 * https://leetcode-cn.com/problems/valid-sudoku/
 * 主要就是 3x3 宫格的 index 计算。 i/3 取整后*3 与 列 j/3 取整相加获得
 * 各类型初始化的问题，一开始将初始化放在循环里耦合，其实可以如下先直接遍历一便，而不用每次都判断后再初始化。
 */

/**
* @param {character[][]} board
* @return {boolean}
*/
function isValidSudoku(board) {
    let columns = {}
    let rows = {}
    let grid = {}

    for (let i = 0; i < 9; i++) {
        columns[i] = {}
        rows[i] = {}
        grid[i] = {}
    }


    for (let i = 0; i < 9; i++) {
        for (let j = 0; j < 9; j++) {
            let v = board[i][j]
            let box_index = Math.floor((i / 3)) * 3 + Math.floor(j / 3);
            if (v !== '.') {
                if (columns[j][v] || rows[i][v] || grid[box_index][v]) return false;

                columns[j][v] = true
                rows[i][v] = true
                grid[box_index][v] = true
            }
        }
    }
    return true
}

let board = [
    ["5", "3", ".", ".", "7", ".", ".", ".", "."],
    ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    [".", "9", "8", ".", ".", ".", ".", "6", "."],
    ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
    ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
    ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    [".", "6", ".", ".", ".", ".", "2", "8", "."],
    [".", ".", ".", "4", "1", "9", ".", ".", "5"],
    [".", ".", ".", ".", "8", ".", ".", "7", "9"]
]

let false_board = [
    ["8", "3", ".", ".", "7", ".", ".", ".", "."],
    ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    [".", "9", "8", ".", ".", ".", ".", "6", "."],
    ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
    ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
    ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    [".", "6", ".", ".", ".", ".", "2", "8", "."],
    [".", ".", ".", "4", "1", "9", ".", ".", "5"],
    [".", ".", ".", ".", "8", ".", ".", "7", "9"]
]
console.log(isValidSudoku(board))
console.log(isValidSudoku(false_board))